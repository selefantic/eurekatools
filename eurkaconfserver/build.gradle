/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Java project to get you started.
 * For more details take a look at the Java Quickstart chapter in the Gradle
 * User Manual available at https://docs.gradle.org/5.6.3/userguide/tutorial_java_projects.html
 */

plugins {
    id 'java'   
    id "io.spring.dependency-management" version "${iospringManVersion}"     
    id "org.springframework.boot" version "${springbootVersion}"
    id 'application'
}

def env = "dev"  

ext {
    //2.指定扩展参数-主类
    masterMain = 'com.sele.build.ConfigServerEurekaApplication'
    //3.指定启动类配置文件
    masterSources = files("$buildDir/resources/main")
} 

dependencies {

    //implementation "com.google.guava:guava:${guavaVersion}"    
    //implementation "org.springframework.boot:spring-boot-starter-undertow:${undertowVersion}"
    //implementation 'org.springframework.boot:spring-boot-starter-web'   
    //implementation 'org.springframework.boot:spring-boot-starter-log4j2'   
    //implementation 'org.springframework.boot:spring-boot-starter-actuator'
    //implementation "org.springframework.boot:spring-boot-starter-security:${springbootSecurityVersion}"
    //implementation 'com.github.ben-manes.caffeine:caffeine'
    
    implementation "org.springframework.boot:spring-boot-starter-web:${springbootVersion}"
    implementation "org.springframework.boot:spring-boot-starter-security:${springbootSecurityVersion}"
    
    implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudStarterNetflixEurekaClientVersion}"
    implementation "org.springframework.cloud:spring-cloud-config-server:${springbootConfVersion}"
    
    implementation "org.apache.logging.log4j:log4j-web:${log4jWebVersion}"
    //implementation 'org.springframework.boot:spring-boot-starter-security'
    
    //implementation "org.springframework.cloud:spring-cloud-starter-netflix-eureka-client:${springCloudStarterNetflixEurekaClientVersion}"
    
    // https://mvnrepository.com/artifact/org.apache.logging.log4j/log4j-web
    
    

}

sourceSets {
    //main{……}是默认，可以不写//所以test{……}在这里就不写了
    main {
        java {
            srcDir 'src/main/java'
        }
        resources {
            srcDir 'src/conf/dev'
        }
    }
}

tasks.startScripts {
    classpath += files("resource")
    doLast {
        //针对不同的平台进行不同的包文件格式
        def windowsScriptFile = file getWindowsScript()
        def unixScriptFile = file getUnixScript()
        windowsScriptFile.text = windowsScriptFile.text.replace('$APP_HOME/lib/resource', '$APP_HOME/resource')
        unixScriptFile.text = unixScriptFile.text.replace('$APP_HOME/lib/resource', '$APP_HOME/resource')
    }
}


distributions {
    main {
        contents {
            into('resource') { //指定需要将配置文件放入的目录
                from("src/conf/$env") { //指定当前配置文件所有在目录
                    include '/**/*' //动态指定需要打包的配置文件   Ant表达式
                }
            }
        }
    }
}

configurations {
	compile.exclude module: 'spring-boot-starter-tomcat'
	compile.exclude module: 'spring-cloud-netflix-ribbon'
	compile.exclude module: 'spring-boot-starter-logging' 
	all*.exclude group:'org.springframework.boot',module:'spring-boot-starter-tomcat'
}

application {
    // Define the main class for the application
    mainClassName = masterMain
}

static def releaseTime() {
    return new Date().format("yyyyMMddHHmm", TimeZone.getDefault())
}
